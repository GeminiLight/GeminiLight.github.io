{"meta":{"title":"Gemini向光性","subtitle":"Light is always on","description":"","author":"GeminiLight","url":"https://www.blog.geminilight.cn","root":"/"},"pages":[{"title":"","date":"2020-08-13T16:28:14.176Z","updated":"2020-08-13T16:28:05.849Z","comments":true,"path":"README.html","permalink":"https://www.blog.geminilight.cn/README.html","excerpt":"","text":""},{"title":"404","date":"2020-01-09T05:25:01.000Z","updated":"2020-08-13T18:42:15.607Z","comments":true,"path":"/404.html","permalink":"https://www.blog.geminilight.cn/404.html","excerpt":"","text":"​ 哇！你探索到了还没被发现的神秘地方 觉得孤单了就坐飞船返回吧"},{"title":"about","date":"2020-08-13T14:21:20.000Z","updated":"2020-08-13T15:41:06.388Z","comments":false,"path":"about/index.html","permalink":"https://www.blog.geminilight.cn/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-08-13T14:17:43.000Z","updated":"2020-08-13T17:18:04.113Z","comments":false,"path":"categories/index.html","permalink":"https://www.blog.geminilight.cn/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-08-13T14:17:32.000Z","updated":"2020-08-13T15:40:49.327Z","comments":false,"path":"tags/index.html","permalink":"https://www.blog.geminilight.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python之with语句详解","slug":"with语句","date":"2020-08-14T04:29:07.751Z","updated":"2020-08-14T04:31:23.146Z","comments":true,"path":"2020/08/14/with语句/","link":"","permalink":"https://www.blog.geminilight.cn/2020/08/14/with%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"在我们使用Python的时候，常使用到如下的代码块: 1234567# 文件读取with open(file, &#x27;r&#x27;) as f: # CODE BLOCK ## 梯度计算with tf.GradientTape() as g: # CODE BLOCK # 在很多场景中，使用with语句来可以让我们可以更好地来管理资源和简化代码，它可以看做是对try/finally模式的简化。它原理上是利用了上下文管理器，下文简要介绍将对其执行原理和自定义的方法。 概念与原理上下文管理协议（Context Management Protocol）包含方法 __enter__() 和 __exit__() ，支持该协议的对象要实现这两个方法。 上下文管理器（Context Manager）支持上下文管理协议的对象，这种对象必须实现 __enter__() 和 __exit__() 方法。上下文管理器定义执行with语句时要建立的运行时上下文，负责执行with语句块上下文中的进入与退出操作。通常使用with语句调用上下文管理器，也可以通过直接调用其方法来使用。 __enter__() with语句执行时，先获取上下文管理器对象，随后调用其 __enter__() 若有 as var 语句，则将返回值赋给变量var 可以返回上下文管理器对象本身，也可以是其他相关对象 __exit__() 带有三个参数 exc_type, exc_val, exc_tb 若上下文管理器对象执行无异常，则三个参数均为 None 若发生异常，则三个参数分别为 异常类型，异常值和tracback信息 with语句执行过程123456# EXP: 表达式# VAR: 变量名，[as VAR][可选]# BlOCK: 代码块with EXP as VAR: BLOCK 执行代码时，先执行 EXPR 语句，生成上下文管理器对象 context_manager； 获取上下文管理器的 __exit()__ 方法，并保存起来用于之后的调用； 调用上下文管理器的 __enter__() 方法，且可将返回值赋给as语句变量； 执行BLOCK中的表达式； 不管是否执行过程中是否发生了异常，执行上下文管理器的 __exit__() 方法， 执行“清理”工作，如释放资源等。 如果执行过程中没有出现异常，或者语句体中执行了语句 break / continue / return ，则以 None 作为参数调用 __exit__(None, None, None) ； 如果执行过程中出现异常，则使用sys.exc_info得到的异常信息为参数调用 __exit__(exc_type, exc_value, exc_traceback) ； 出现异常时，如果 __exit__(type, value, traceback) 返回 False ，则会重新抛出异常，让with之外的语句逻辑来处理异常，这也是通用做法；如果返回True，则忽略异常，不再对异常进行处理。 自定义上下文管理器 它使代码更简练，可以简化try/finally模式 当代码异常产生时，__exit__() 会执行清理工作 可以对软件系统中的资源进行管理，比如数据库连接、共享资源的访问控制等 12345678910111213141516171819202122232425262728293031323334# coding = utf-8# 上下文管理器类class TestWith(object): def __init__(self): pass def __enter__(self): &quot;&quot;&quot;进入with语句的时候被调用 并将返回值赋给as语句的变量名 &quot;&quot;&quot; print(&#x27;__enter__&#x27;) return &quot;var&quot; def __exit__(self, exc_type, exc_val, exc_tb): &quot;&quot;&quot;离开with的时候被with调用&quot;&quot;&quot; print(&#x27;__exit__&#x27;) return True# with后面必须跟一个上下文管理器# 如果使用了as，则是把上下文管理器的 __enter__() 方法的返回值赋值给 target# target 可以是单个变量，或者由“()”括起来的元组（不能是仅仅由“,”分隔的变量列表，必须加“()”）if __name__ = &#x27;main&#x27;: with TestWith() as var: print(var)# 运行结果&#x27;&#x27;&#x27;__enter__var__exit__&#x27;&#x27;&#x27; 本例仅对应代码正常执行的流程，其他特殊情况不再一一列举，有兴趣可单独实验。 参考 浅谈 Python 的 with 语句 Python中with用法详解 Python中with使用","categories":[{"name":"Python","slug":"Python","permalink":"https://www.blog.geminilight.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.blog.geminilight.cn/tags/Python/"}]},{"title":"Start the Journey of My Blog","slug":"start","date":"2020-08-13T14:22:03.927Z","updated":"2020-03-15T00:12:07.340Z","comments":true,"path":"2020/08/13/start/","link":"","permalink":"https://www.blog.geminilight.cn/2020/08/13/start/","excerpt":"","text":"Welcome to My Programming World 有趣的灵魂终将相遇 欢迎来到我的博客 希望你能在这里找到对你有帮助的东西 Self IntroductionGemini向光性一个困在双子星座的流浪旅人目前就读于重庆大学软件工程专业 · 大二在这里，我会记录下自己学习与生活的痕迹 座右铭：热爱code，渴望better Major Language博客主要会涉及以下语言： C C++ Python Web前端（HTML/ CSS/ JS等） 当然，之后也会涉及其他语言的","categories":[{"name":"技术","slug":"技术","permalink":"https://www.blog.geminilight.cn/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"简介","slug":"简介","permalink":"https://www.blog.geminilight.cn/tags/%E7%AE%80%E4%BB%8B/"},{"name":"历程","slug":"历程","permalink":"https://www.blog.geminilight.cn/tags/%E5%8E%86%E7%A8%8B/"},{"name":"愿望","slug":"愿望","permalink":"https://www.blog.geminilight.cn/tags/%E6%84%BF%E6%9C%9B/"}]},{"title":"P-N-1-Numpy简介","slug":"PN1-Numpy简介","date":"2020-08-13T14:22:03.914Z","updated":"2019-08-22T04:26:24.255Z","comments":true,"path":"2020/08/13/PN1-Numpy简介/","link":"","permalink":"https://www.blog.geminilight.cn/2020/08/13/PN1-Numpy%E7%AE%80%E4%BB%8B/","excerpt":"","text":"Numpy简史： Python语言诞生后，开发人员就产生了数值计算的需求，科学社区开始考虑用它进行科学计算。 2006年，Travis Oliphant发布了NumPy库的第一个版本，整合了Numeric与Numarray包。 如今，Numpy广泛应用于计算多维数组和大型数组等方面。此外，它还提供多个函数，操作起数组来效率很高，还可用来实现高级数学运算。 当前，NumPy是开源项目，使用BSD许可证。 Numpy &amp; pandas NumPy是用Python进行科学计算，尤其是数据分析时，所用到的一个基础库。它是大量Python数学和科学计算包的基础，比如pandas库就用到了NumPy。 pandas库专门用于数据分析，充分借鉴了Python标准库NumPy的相关概念。 Numpy的安装： Windows： pip install numpy 若下载慢导致失败，可指定国内pip源（加上-i参数，指定pip源） pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple\\ 导入Numpy模块 &gt;&gt;&gt; import numpy as np","categories":[],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"https://www.blog.geminilight.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"Python","slug":"Python","permalink":"https://www.blog.geminilight.cn/tags/Python/"},{"name":"Numpy","slug":"Numpy","permalink":"https://www.blog.geminilight.cn/tags/Numpy/"}],"author":"Gemini向光性"},{"title":"Hello World","slug":"hello-world","date":"2020-08-13T11:50:56.618Z","updated":"2020-08-13T11:50:56.618Z","comments":true,"path":"2020/08/13/hello-world/","link":"","permalink":"https://www.blog.geminilight.cn/2020/08/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"data analysis","slug":"data-analysis","date":"2019-08-22T02:08:11.000Z","updated":"2019-08-22T04:45:07.106Z","comments":true,"path":"2019/08/22/data-analysis/","link":"","permalink":"https://www.blog.geminilight.cn/2019/08/22/data-analysis/","excerpt":"","text":"Python数据分析Python 涉及模块： Numpy pandas matplotlib","categories":[],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"https://www.blog.geminilight.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"Python","slug":"Python","permalink":"https://www.blog.geminilight.cn/tags/Python/"}],"author":"Gemini向光性"}],"categories":[{"name":"Python","slug":"Python","permalink":"https://www.blog.geminilight.cn/categories/Python/"},{"name":"技术","slug":"技术","permalink":"https://www.blog.geminilight.cn/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.blog.geminilight.cn/tags/Python/"},{"name":"简介","slug":"简介","permalink":"https://www.blog.geminilight.cn/tags/%E7%AE%80%E4%BB%8B/"},{"name":"历程","slug":"历程","permalink":"https://www.blog.geminilight.cn/tags/%E5%8E%86%E7%A8%8B/"},{"name":"愿望","slug":"愿望","permalink":"https://www.blog.geminilight.cn/tags/%E6%84%BF%E6%9C%9B/"},{"name":"数据分析","slug":"数据分析","permalink":"https://www.blog.geminilight.cn/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"Numpy","slug":"Numpy","permalink":"https://www.blog.geminilight.cn/tags/Numpy/"}]}