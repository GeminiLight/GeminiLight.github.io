<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据分析简介</title>
    <url>/2019/08/22/DA%20-%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/da-introduction/</url>
    <content><![CDATA[<h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p><img src="https://i.loli.net/2019/08/22/vJjE548cQqPXxaZ.jpg" alt="pretty"></p>
<h2 id="相关模块简介"><a href="#相关模块简介" class="headerlink" title="相关模块简介"></a>相关模块简介</h2><h3 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h3><h3 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h3><h3 id="Scipy"><a href="#Scipy" class="headerlink" title="Scipy"></a>Scipy</h3><h3 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h3>]]></content>
      <categories>
        <category>DA - 数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy模块入门</title>
    <url>/2019/08/19/DA%20-%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/da-numpy/</url>
    <content><![CDATA[<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><ul>
<li>Python语言诞生后，开发人员就产生了数值计算的需求，科学社区开始考虑用它进行科学计算。</li>
<li>2006年，Travis Oliphant发布了NumPy库的第一个版本，整合了Numeric与Numarray包。</li>
<li>如今，Numpy广泛应用于计算多维数组和大型数组等方面。此外，它还提供多个函数，操作起数组来效率很高，还可用来实现高级数学运算。</li>
<li>当前，NumPy是开源项目，使用BSD许可证。</li>
</ul>
<h3 id="Numpy-amp-pandas"><a href="#Numpy-amp-pandas" class="headerlink" title="Numpy &amp; pandas"></a>Numpy &amp; pandas</h3><ul>
<li>NumPy是用Python进行科学计算，尤其是数据分析时，所用到的一个基础库。<br>它是大量Python数学和科学计算包的基础，比如pandas库就用到了NumPy。</li>
<li>pandas库专门用于数据分析，充分借鉴了Python标准库NumPy的相关概念。</li>
</ul>
<h3 id="Numpy的安装"><a href="#Numpy的安装" class="headerlink" title="Numpy的安装"></a>Numpy的安装</h3><ul>
<li>Windows：<br><code>pip install numpy</code><br>若下载慢导致失败，可指定国内pip源（加上-i参数，指定pip源）<br><code>pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</code>\</li>
<li>导入Numpy模块<br><code>&gt;&gt;&gt; import numpy as np</code></li>
</ul>
]]></content>
      <categories>
        <category>DA - 数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习概念</title>
    <url>/2019/08/22/DL%20-%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/data-analysis/</url>
    <content><![CDATA[<h2 id="Python数据分析"><a href="#Python数据分析" class="headerlink" title="Python数据分析"></a>Python数据分析</h2><p><img src="https://i.loli.net/2019/08/22/vJjE548cQqPXxaZ.jpg" alt="pretty"></p>
<h3 id="涉及模块"><a href="#涉及模块" class="headerlink" title="涉及模块"></a>涉及模块</h3><ul>
<li>Numpy</li>
<li>pandas</li>
<li>matplotlib</li>
</ul>
]]></content>
      <categories>
        <category>DL - 深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Start the Journey of My Blog</title>
    <url>/2019/08/03/MY%20-%20%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/start-my-blog/</url>
    <content><![CDATA[<h2 id="Welcome-to-My-Programming-World"><a href="#Welcome-to-My-Programming-World" class="headerlink" title="Welcome to My Programming World"></a>Welcome to My Programming World</h2><p>有趣的灵魂终将相遇<br>欢迎来到我的博客<br>希望你能在这里找到对你有帮助的东西</p>
<h2 id="Self-Introduction"><a href="#Self-Introduction" class="headerlink" title="Self Introduction"></a>Self Introduction</h2><p>Gemini向光性<br>一个困在双子星座的流浪旅人<br>目前就读于重庆大学软件工程专业<br>在这里，我会记录下自己学习与生活的痕迹</p>
<h2 id="Major-Language"><a href="#Major-Language" class="headerlink" title="Major Language"></a>Major Language</h2><p>博客主要会涉及以下语言：</p>
<ul>
<li><p>C</p>
</li>
<li><p>C++</p>
</li>
<li><p>Python</p>
</li>
<li><p>Java</p>
</li>
<li><p>Web前端（HTML/ CSS/ JS等）</p>
<p>当然，之后也会涉及其他语言的</p>
</li>
</ul>
]]></content>
      <categories>
        <category>MY - 生活随笔</category>
      </categories>
      <tags>
        <tag>个人简介</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之with语句详解</title>
    <url>/2020/08/14/PL%20-%20Python/Python-with/</url>
    <content><![CDATA[<p>在我们使用Python的时候，常使用到如下的代码块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件读取</span></span><br><span class="line"><span class="keyword">with</span> open(file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># CODE BLOCK #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 梯度计算</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> g:</span><br><span class="line">    <span class="comment"># CODE BLOCK #</span></span><br></pre></td></tr></table></figure>

<p>在很多场景中，使用with语句来可以让我们可以更好地来管理资源和简化代码，它可以看做是对try/finally模式的简化。它原理上是利用了上下文管理器，下文简要介绍将对其执行原理和自定义的方法。<a id="more"></a></p>
<h2 id="上下文管理器概念"><a href="#上下文管理器概念" class="headerlink" title="上下文管理器概念"></a>上下文管理器概念</h2><h3 id="上下文管理协议（Context-Management-Protocol）"><a href="#上下文管理协议（Context-Management-Protocol）" class="headerlink" title="上下文管理协议（Context Management Protocol）"></a>上下文管理协议（Context Management Protocol）</h3><p>包含方法 <code>__enter__()</code> 和 <code>__exit__()</code> ，支持该协议的对象要实现这两个方法。</p>
<h3 id="上下文管理器（Context-Manager）"><a href="#上下文管理器（Context-Manager）" class="headerlink" title="上下文管理器（Context Manager）"></a>上下文管理器（Context Manager）</h3><p>支持上下文管理协议的对象，这种对象必须实现 <code>__enter__()</code> 和 <code>__exit__()</code> 方法。<br>上下文管理器定义执行with语句时要建立的运行时上下文，负责执行with语句块上下文中的进入与退出操作。<br>通常使用with语句调用上下文管理器，也可以通过直接调用其方法来使用。</p>
<ul>
<li><strong><code>__enter__()</code></strong><ul>
<li>with语句执行时，先获取上下文管理器对象，随后调用其 <code>__enter__()</code></li>
<li>若有 <code>as var</code> 语句，则将返回值赋给变量var</li>
<li>可以返回上下文管理器对象本身，也可以是其他相关对象</li>
</ul>
</li>
<li><strong><code>__exit__()</code></strong><ul>
<li>带有三个参数 <code>exc_type, exc_val, exc_tb</code></li>
<li>若上下文管理器对象执行无异常，则三个参数均为 <code>None</code></li>
<li>若发生异常，则三个参数分别为 异常类型，异常值和tracback信息</li>
</ul>
</li>
</ul>
<h2 id="with语句执行过程"><a href="#with语句执行过程" class="headerlink" title="with语句执行过程"></a>with语句执行过程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#   EXP: 表达式</span></span><br><span class="line"><span class="comment">#   VAR: 变量名，[as VAR][可选]</span></span><br><span class="line"><span class="comment"># BlOCK: 代码块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> EXP <span class="keyword">as</span> VAR:</span><br><span class="line">    BLOCK</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2020/png/991157/1597208515088-0b99ba87-9eb4-4792-8ded-64b5463a6531.png#align=left&display=inline&height=224&margin=%5Bobject%20Object%5D&name=image.png&originHeight=333&originWidth=1151&size=119002&status=done&style=none&width=773" alt="image.png"></p>
<ol>
<li>执行代码时，先执行 <code>EXPR</code> 语句，生成上下文管理器对象 context_manager；</li>
<li>获取上下文管理器的 <code>__exit()__</code> 方法，并保存起来用于之后的调用；</li>
<li>调用上下文管理器的 <code>__enter__()</code> 方法，且可将返回值赋给as语句变量；</li>
<li>执行BLOCK中的表达式；</li>
<li>不管是否执行过程中是否发生了异常，执行上下文管理器的 <code>__exit__()</code> 方法， 执行“清理”工作，如释放资源等。<ol>
<li>如果执行过程中没有出现异常，或者语句体中执行了语句 <code>break</code> / <code>continue</code> / <code>return</code> ，则以 <code>None</code> 作为参数调用 <code>__exit__(None, None, None)</code> ；</li>
<li>如果执行过程中出现异常，则使用sys.exc_info得到的异常信息为参数调用 <code>__exit__(exc_type, exc_value, exc_traceback)</code> ；</li>
</ol>
</li>
<li>出现异常时，如果 <code>__exit__(type, value, traceback)</code> 返回 <code>False</code> ，则会重新抛出异常，让with之外的语句逻辑来处理异常，这也是通用做法；如果返回True，则忽略异常，不再对异常进行处理。</li>
</ol>
<h2 id="自定义上下文管理器"><a href="#自定义上下文管理器" class="headerlink" title="自定义上下文管理器"></a>自定义上下文管理器</h2><ul>
<li>它使代码更简练，可以简化try/finally模式</li>
<li>当代码异常产生时，<code>__exit__()</code> 会执行清理工作</li>
<li>可以对软件系统中的资源进行管理，比如数据库连接、共享资源的访问控制等<br /></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding = utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上下文管理器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestWith</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;进入with语句的时候被调用</span></span><br><span class="line"><span class="string">           并将返回值赋给as语句的变量名</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&#x27;__enter__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;var&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;离开with的时候被with调用&quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&#x27;__exit__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with后面必须跟一个上下文管理器</span></span><br><span class="line"><span class="comment"># 如果使用了as，则是把上下文管理器的 __enter__() 方法的返回值赋值给 target</span></span><br><span class="line"><span class="comment"># target 可以是单个变量，或者由“()”括起来的元组（不能是仅仅由“,”分隔的变量列表，必须加“()”）</span></span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">&#x27;main&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> TestWith() <span class="keyword">as</span> var:</span><br><span class="line">        print(var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">__enter__</span></span><br><span class="line"><span class="string">var</span></span><br><span class="line"><span class="string">__exit__</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>本例仅对应代码正常执行的流程，其他特殊情况不再一一列举，有兴趣可单独实验。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaWJtLmNvbS96aC9hcnRpY2xlcy9vcy1jbi1weXRob253aXRoLw==">浅谈 Python 的 with 语句<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcHl0aG9uYmFvL3AvMTEyMTEzNDcuaHRtbA==">Python中with用法详解<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC83NDU1Mjg3Nw==">Python中with使用<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>PL - Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>语法进阶</tag>
      </tags>
  </entry>
</search>
