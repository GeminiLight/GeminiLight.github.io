<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据分析知识体系</title>
    <url>/2019/08/22/DA%20-%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/da-introduction/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="数据分析">数据分析</h2>
<h2 id="python模块">Python模块</h2>
<h3 id="numpy">Numpy</h3>
<h3 id="pandas">pandas</h3>
<h3 id="scipy">Scipy</h3>
<h3 id="matplotlib">matplotlib</h3>
<figure>
<img src="https://i.loli.net/2019/08/22/vJjE548cQqPXxaZ.jpg" alt="test" /><figcaption>test</figcaption>
</figure>
]]></content>
      <categories>
        <category>DA - 数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>【Numpy】入门</title>
    <url>/2019/08/19/DA%20-%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/da-numpy/</url>
    <content><![CDATA[<a id="more"></a>
<h3 id="数据">数据</h3>
<ul>
<li>Python语言诞生后，开发人员就产生了数值计算的需求，科学社区开始考虑用它进行科学计算。</li>
<li>2006年，Travis Oliphant发布了NumPy库的第一个版本，整合了Numeric与Numarray包。</li>
<li>如今，Numpy广泛应用于计算多维数组和大型数组等方面。此外，它还提供多个函数，操作起数组来效率很高，还可用来实现高级数学运算。</li>
<li>当前，NumPy是开源项目，使用BSD许可证。</li>
</ul>
<h3 id="numpy-pandas">Numpy &amp; pandas</h3>
<ul>
<li>NumPy是用Python进行科学计算，尤其是数据分析时，所用到的一个基础库。 它是大量Python数学和科学计算包的基础，比如pandas库就用到了NumPy。</li>
<li>pandas库专门用于数据分析，充分借鉴了Python标准库NumPy的相关概念。</li>
</ul>
<h3 id="numpy的安装">Numpy的安装</h3>
<ul>
<li>Windows： <code>pip install numpy</code> 若下载慢导致失败，可指定国内pip源（加上-i参数，指定pip源） <code>pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</code><br />
</li>
<li>导入Numpy模块 <code>&gt;&gt;&gt; import numpy as np</code></li>
</ul>
]]></content>
      <categories>
        <category>DA - 数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习知识体系</title>
    <url>/2019/08/22/DL%20-%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/dl-introduction/</url>
    <content><![CDATA[<a id="more"></a>
<h3 id="基础网络">基础网络</h3>
<ul>
<li>CNN</li>
<li>RNN</li>
<li>GNN</li>
</ul>
<h3 id="应用场景">应用场景</h3>
<ul>
<li>CV 计算机视觉</li>
<li>NLP 自然语言处理</li>
<li>KG 知识图谱</li>
</ul>
<h3 id="主流框架">主流框架</h3>
<ul>
<li>TensorFlow</li>
<li>PyTorch</li>
<li>PaddlePaddle</li>
<li>MindSpore</li>
</ul>
]]></content>
      <categories>
        <category>DL - 深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>【游戏人生】双子Gemini</title>
    <url>/2017/08/07/MY%20-%20%E6%84%9F%E6%82%9F%E9%9A%8F%E7%AC%94/game-gemini/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>“我们都在寻找着 某个人”——《你的名字。》</p>

</blockquote>
<p>暗夜中的荧树依旧沉睡着，它已经很久很久没有发过光了，久的人们都早已忘记了那个传说...... <a id="more"></a></p>
<h2 id="一相遇前尘如是">一、相遇：前尘如是</h2>
<p>少了星光的装点，夜空暗淡了许多。我心有所念地张望着四周，却又不知在找寻着谁。明明毫无目的地来这儿，却又诚惶诚恐地害怕着错过。空荡荡的心将无神的目光映向不远处沉眠的荧树，然后莫名其妙地叹息。准备离开时的回眸，让我们的目光在朦胧的暮色下交错，我似乎懂了，懂得了命运织缠的意义。</p>
<p><img src="/resource/images/game-gemini-1.png" /></p>
<p>时间放佛在那一刻停格，空气也随之凝滞，任由荧树的年轮刻录下心动和心悸： 你尚未出现时，我的生命平静，轩昂阔步行走，动辄料事如神；如今惶乱，怯弱，像冰融的春水，一流就流向你，又不知你在何处（木心）。可明明你就在我面前，我却又不知所措。</p>
<p><img src="/resource/images/game-gemini-2.png" /></p>
<p>空气不再沉默——似乎有种引力牵引着我慢步走向了你。脚步声在寂寥的夜空中徘徊，你退回荧树枝下，等候着我的到来。但当手被牵起时，你却皱了皱眉，有些许心痛，却又不知痛从何而来。彼此只手相依，只手迎风，曼舞空凉。执子之手，挥洒荧光。古树开始苏醒，重现荧光，夜空渐被点亮，直至整个银河宛若天堂。</p>
<h2 id="二别离心恸幽思">二、别离：心恸幽思</h2>
<p><img src="/resource/images/game-gemini-3.png" /></p>
<p>面前是无数陨石阻隔，彼岸即是梦寐以求的星河。无数次的碰撞，无数次的跌倒，无数次的逃亡。看着身旁遍体鳞伤的你，我心如刀割。头脑开始眩晕，身体开始麻木，但始终未停止撞击。终于，你，停了下来，慢慢下坠。此时，我，早已泪眼婆娑，椎心泣血。抱紧昏倒的你，看着你迂回的伤痕，痛恨自己的无力。</p>
<p><img src="/resource/images/game-gemini-4.png" /></p>
<p>恸哭一声——微光亦可昼亮，化作流星花火，划破无边银河。天空被渲染成晨曦般的颜色，陨石被狠狠撞碎坠落，星际被灿烂夺去轮廓。我回首望向了你，微笑着轻抚了一下，拭去你眼角的泪花。凝视着你，沉默，却又更多话语。回顾此生，路途虽险，却不惧混沌黑夜，不畏疾风骤雨，只因有你相伴左右，不曾离弃。</p>
<p><img src="/resource/images/game-gemini-6.png" /></p>
<p>原谅我，不再陪你，望这最后一星余晖燃尽守护你；失去我，日月如常，世上最美的星云就在前方；答应我，生活下去，未来你会有更好的相遇。</p>
<p>星辉殆尽，堙灭散落，银河再归混沌，我已一别永年。就这样，我离开了你，无声无息，了无痕迹。</p>
<h2 id="三追忆念旧顾逝">三、追忆：念旧顾逝</h2>
<p>最后一丝星火被黑夜淹没，前方不再有陨石阻隔，她向前扑去，想要如往常般依偎着他，却痛痛地跌倒在地。眼泪肆意挥霍着，润湿了瞳孔，模糊了每个角落；打在了心口，放任痛楚清晰地游走，倒带往昔彼此依偎的甜蜜：</p>
<p><img src="/resource/images/game-gemini-14.png" /> <img src="/resource/images/game-gemini-15.png" /> <img src="/resource/images/game-gemini-16.png" /> <img src="/resource/images/game-gemini-17.png" /> <img src="/resource/images/game-gemini-19.png" /></p>
<p>荧树下他许诺让她看到世间最美的星云，带她浪迹天涯。 黎明的曙光照亮孤寂的夜空，驱赶着不羁的黑暗，他们双手相牵，追赶着晨曦，一起见证日出的那一抹微光。正午的太阳愈渐熠亮，他们在风中嬉戏，在路旁依靠，感受着对方的呼吸，心透着无声的默契。黄昏悄悄降临，彩霞中奔跑的身影停下了脚步，最浪漫不过彼此并肩欣赏夕阳。</p>
<p>时而细雨微作，他们轻歌慢步；时而骤风忽起，他们依偎拥抱。他们在文明废墟中相伴而游，见证希望；在极地冰川中相依而行，战克风霜；在富丽殿堂中相视而笑，共享荣光。音符弹奏着甜蜜，图腾印刻下笑容。</p>
<p>日出日落，朝暮共同分享，无惧颠簸跌宕；<br />
路途遥远，同游山高水长，风景彼此共赏。</p>
<p>而这一切已成过往……</p>
<h2 id="四辉煌星夜如斯">四、辉煌：星夜如斯</h2>
<p>任何一种环境或一个人，初次见面就预感到离别的隐痛时，你必定是爱上他了。（黄永玉）她明白了初遇时的心悸，不是青涩，亦不是恐惧，而是她早已预见他们命中注定要分离。 霓虹渐显倪端，微光开始蔓延，泪花随风飘落，伊人难以忘怀。星光映在她的脸庞，尽是泪行。手紧紧的攥着，慢步向前，她的眼神中少了悲伤，多了空灵，即使面前魂牵梦绕的星云也扬不起她嘴角的一丝微笑。</p>
<p>景虽美，光虽亮，可，泪已尽，心已灰。</p>
<p>没有形单影只的倾诉，没有感天动地的恸哭，甚至没有了恋人别离的苦楚，她走向星云的中央，目光死死的盯着他星辉散尽的方向，双臂展开，静静释怀……</p>
<p><img src="/resource/images/game-gemini-12.png" /></p>
<p>混沌银河骤然生光，星云再次燃起辉亮——她竭尽星辉在祈愿，不求时间重返，只求来世重逢。那一刻，宇宙听到了她的心声，苍穹为之感染。夜空灰暗千年，不再寂寥，星辉绚丽，占据每一寸黑暗。她最后一次俯瞰世间，不再有任何羁绊，微微一笑，随风消散。</p>
<p><img src="/resource/images/game-gemini-13.png" /></p>
<p>周边的星辰说那是他们一生中见过的最美最亮的星辉：冰冷中透着暖意，凄美却又不失灿烂，那不是悲伤，而是诠释，是渴盼，是希望。 言语停了下来，荧树又重归于暗淡... ...</p>
<h2 id="五来世情缘何去">五、来世：情缘何去</h2>
<p>银河浩渺无垠，星辰繁若樱花，来生相距光年十万，抑或咫尺之遥，可否会重逢再会？如若他日于星海偶遇，你我会擦肩而过，彼此不识，还是会心动如昔，情缘再续？ 命运最神秘的不是变幻莫测无人知晓，而是冥冥之中自有定向。</p>
<hr />
<p>荧树沉寂了万年，传说不再被流传，但至今仍会有人说：</p>
<blockquote class="blockquote-center">
<p>一次告别 天上就会有颗星 又熄灭</p>

</blockquote>
]]></content>
      <categories>
        <category>MY - 感悟随笔</category>
      </categories>
      <tags>
        <tag>游戏人生</tag>
      </tags>
  </entry>
  <entry>
    <title>Start the Journey of My Blog</title>
    <url>/2019/08/03/MY%20-%20%E6%84%9F%E6%82%9F%E9%9A%8F%E7%AC%94/start-my-blog/</url>
    <content><![CDATA[<h2 id="welcome-to-my-blog">Welcome to My Blog</h2>
<p>Gemini向光性<br />
困在双子星座的流浪旅人<br />
<a href="/about">了解更多</a></p>
<a id="more"></a>
<h2 id="involved-fields">Involved Fields</h2>
<p>博客主要会涉及以下内容：</p>
<ul>
<li>机器学习：传统机器学习、深度学习、强化学习</li>
<li>数据分析：Numpy、Pandas、Scipy、Matlibplot</li>
<li>全栈开发：Vue、jQuery、MySQL、SpringBoot、Django</li>
<li>编程语言：Python、C/C++、Java、JS/TS</li>
</ul>
]]></content>
      <categories>
        <category>MY - 感悟随笔</category>
      </categories>
      <tags>
        <tag>博客简介</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】with语句原理</title>
    <url>/2020/08/14/PL%20-%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/pl-python-with/</url>
    <content><![CDATA[<p>在我们使用Python的时候，常使用到如下的代码块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件读取</span></span><br><span class="line"><span class="keyword">with</span> open(file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># CODE BLOCK #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 梯度计算</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> g:</span><br><span class="line">    <span class="comment"># CODE BLOCK #</span></span><br></pre></td></tr></table></figure>
<p>在很多场景中，使用with语句来可以让我们可以更好地来管理资源和简化代码，它可以看做是对try/finally模式的简化。它原理上是利用了上下文管理器，下文简要介绍将对其执行原理和自定义的方法。<a id="more"></a></p>
<h2 id="上下文管理器概念">上下文管理器概念</h2>
<h3 id="上下文管理协议context-management-protocol">上下文管理协议（Context Management Protocol）</h3>
<p>包含方法 <code>__enter__()</code> 和 <code>__exit__()</code> ，支持该协议的对象要实现这两个方法。</p>
<h3 id="上下文管理器context-manager">上下文管理器（Context Manager）</h3>
<p>支持上下文管理协议的对象，这种对象必须实现 <code>__enter__()</code> 和 <code>__exit__()</code> 方法。 上下文管理器定义执行with语句时要建立的运行时上下文，负责执行with语句块上下文中的进入与退出操作。 通常使用with语句调用上下文管理器，也可以通过直接调用其方法来使用。</p>
<ul>
<li><strong><code>__enter__()</code></strong>
<ul>
<li>with语句执行时，先获取上下文管理器对象，随后调用其 <code>__enter__()</code></li>
<li>若有 <code>as var</code> 语句，则将返回值赋给变量var</li>
<li>可以返回上下文管理器对象本身，也可以是其他相关对象</li>
</ul></li>
<li><strong><code>__exit__()</code></strong>
<ul>
<li>带有三个参数 <code>exc_type, exc_val, exc_tb</code></li>
<li>若上下文管理器对象执行无异常，则三个参数均为 <code>None</code></li>
<li>若发生异常，则三个参数分别为 异常类型，异常值和tracback信息</li>
</ul></li>
</ul>
<h2 id="with语句执行过程">with语句执行过程</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#   EXP: 表达式</span></span><br><span class="line"><span class="comment">#   VAR: 变量名，[as VAR][可选]</span></span><br><span class="line"><span class="comment"># BlOCK: 代码块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> EXP <span class="keyword">as</span> VAR:</span><br><span class="line">    BLOCK</span><br></pre></td></tr></table></figure>
<p><img src="/resource/images/pl-python-with.png" width="100%" /></p>
<ol type="1">
<li>执行代码时，先执行 <code>EXPR</code> 语句，生成上下文管理器对象 context_manager；</li>
<li>获取上下文管理器的 <code>__exit()__</code> 方法，并保存起来用于之后的调用；</li>
<li>调用上下文管理器的 <code>__enter__()</code> 方法，且可将返回值赋给as语句变量；</li>
<li>执行BLOCK中的表达式；</li>
<li>不管是否执行过程中是否发生了异常，执行上下文管理器的 <code>__exit__()</code> 方法， 执行“清理”工作，如释放资源等。
<ol type="1">
<li>如果执行过程中没有出现异常，或者语句体中执行了语句 <code>break</code> / <code>continue</code> / <code>return</code> ，则以 <code>None</code> 作为参数调用 <code>__exit__(None, None, None)</code> ；</li>
<li>如果执行过程中出现异常，则使用sys.exc_info得到的异常信息为参数调用 <code>__exit__(exc_type, exc_value, exc_traceback)</code> ；</li>
</ol></li>
<li>出现异常时，如果 <code>__exit__(type, value, traceback)</code> 返回 <code>False</code> ，则会重新抛出异常，让with之外的语句逻辑来处理异常，这也是通用做法；如果返回True，则忽略异常，不再对异常进行处理。</li>
</ol>
<h2 id="自定义上下文管理器">自定义上下文管理器</h2>
<ul>
<li>它使代码更简练，可以简化try/finally模式</li>
<li>当代码异常产生时，<code>__exit__()</code> 会执行清理工作</li>
<li>可以对软件系统中的资源进行管理，比如数据库连接、共享资源的访问控制等<br /></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding = utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上下文管理器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestWith</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;进入with语句的时候被调用</span></span><br><span class="line"><span class="string">           并将返回值赋给as语句的变量名</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&#x27;__enter__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;var&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;离开with的时候被with调用&quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&#x27;__exit__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with后面必须跟一个上下文管理器</span></span><br><span class="line"><span class="comment"># 如果使用了as，则是把上下文管理器的 __enter__() 方法的返回值赋值给 target</span></span><br><span class="line"><span class="comment"># target 可以是单个变量，或者由“()”括起来的元组（不能是仅仅由“,”分隔的变量列表，必须加“()”）</span></span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">&#x27;main&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> TestWith() <span class="keyword">as</span> var:</span><br><span class="line">        print(var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">__enter__</span></span><br><span class="line"><span class="string">var</span></span><br><span class="line"><span class="string">__exit__</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>本例仅对应代码正常执行的流程，其他特殊情况不再一一列举，有兴趣可单独实验。</p>
<h2 id="参考">参考</h2>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaWJtLmNvbS96aC9hcnRpY2xlcy9vcy1jbi1weXRob253aXRoLw==">浅谈 Python 的 with 语句<i class="fa fa-external-link-alt"></i></span> <br /> <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcHl0aG9uYmFvL3AvMTEyMTEzNDcuaHRtbA==">Python中with用法详解<i class="fa fa-external-link-alt"></i></span> <br /> <span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC83NDU1Mjg3Nw==">Python中with使用<i class="fa fa-external-link-alt"></i></span> <br /></p>
</blockquote>
]]></content>
      <categories>
        <category>PL - 编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>语法进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>【论文精读】Automatic Virtual Network Embedding - A DRL Approach with GCN</title>
    <url>/2020/08/16/RP%20-%20%E7%A7%91%E7%A0%94%E8%AE%BA%E6%96%87/rp-vne-rl-gcn/</url>
    <content><![CDATA[<p>本篇论文将强化学习A3C算法与图卷积神经网络GCN相结合，并且设置了多目标的奖励函数，提出了一种更加高效的虚拟网络嵌入算法。 <a id="more"></a></p>
<h2 id="论文简介">论文简介</h2>
<p><strong>论文名称</strong>：Automatic Virtual Network Embedding: A Deep Reinforcement Learning Approach with Graph Convolutional Networks<br />
<strong>论文作者</strong>：Zhongxia Yan, Jingguo Ge, Y ulei Wu, Senior Member , IEEE, Liangxiong Li, Tong Li<br />
<strong>发表期刊</strong>：JSAC-2020 (CCF-A)<br />
<strong>研究方向</strong>：虚拟网络嵌入<br />
<strong>关键技术</strong>：虚拟网络嵌入, 强化学习, 图卷积神经网络<br />
<strong>主要创新</strong>：强化学习结合图卷积神经网络、并行的强化学习框架、多目标的奖励函数<br />
<span class="exturl" data-url="aHR0cHM6Ly9vcmUuZXhldGVyLmFjLnVrL3JlcG9zaXRvcnkvYml0c3RyZWFtL2hhbmRsZS8xMDg3MS80MDc5OS9ZYW4tSlNBQy0yMDIwLnBkZj9zZXF1ZW5jZT0xJmFtcDtpc0FsbG93ZWQ9eQ==">下载论文<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="问题定义">问题定义</h2>
<h3 id="专业词汇">专业词汇</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">缩写</th>
<th>描述</th>
<th>全名</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">VNE</td>
<td>虚拟网络嵌入</td>
<td>Virtual Network Embedding</td>
</tr>
<tr class="even">
<td style="text-align: center;">VNR</td>
<td>虚拟网络请求</td>
<td>Virtual Network Request</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RL</td>
<td>强化学习</td>
<td>Reinforcement Learning</td>
</tr>
<tr class="even">
<td style="text-align: center;">GCN</td>
<td>图卷积神经网络</td>
<td>Graph Convolutional Network</td>
</tr>
<tr class="odd">
<td style="text-align: center;">A3C</td>
<td></td>
<td>Asynchronous Advantage Actor-Critic</td>
</tr>
</tbody>
</table>
<h3 id="问题描述">问题描述</h3>
<h2 id="算法模型">算法模型</h2>
<h3 id="dl-a3c">DL-A3C</h3>
<h3 id="gcn">GCN</h3>
<h3 id="a3c-gcn">A3C + GCN</h3>
<h2 id="实验结果">实验结果</h2>
<h3 id="设计实验">设计实验</h3>
<ul>
<li>底层网络拓扑
<ul>
<li>使用参数 <span class="math inline">\(\alpha = 0.5\)</span> 和 <span class="math inline">\(\beta = 0.2\)</span> 的 Waxman 随机图来生成一个底层网络拓扑</li>
<li>该网络具有100个结点和500条边（模拟一个中型的ISP）。</li>
<li>随机分配每个节点的CPU数量和边的带宽大小为50~100个单位。</li>
</ul></li>
<li>虚拟网络请求
<ul>
<li>随机生成VNR时满足Possion process（泊松分布），每组评估持续50000个时间单位</li>
<li>即当VNR预期到达率为4个/100个时间单位时，则约有2000个VNR</li>
<li>每个VRN的生成周期满足平均值为500的指数分布</li>
<li>每个VNR的数量均匀分布在2~10之间</li>
<li>初始化VNR中的节点CPU需求和链路带宽需求为0~30的均匀分布</li>
<li>每对节点有50%的可能性形成边</li>
</ul></li>
<li>动态设置参数
<ul>
<li>VNR的到达率、节点及链路资源的分配、每个VNR的节点数量</li>
<li>我们可以通过调节这三个参数来评估各种VNE场景</li>
</ul></li>
<li>测试阶段
<ul>
<li>学习代理仅使用actor网络生成嵌入策略，来从底层网络拓扑中选择合适的节点托管当前的虚拟节点</li>
<li>该代理已被训练72小时，经历了70000次训练迭代，进行了近1680000次不同的VNR</li>
</ul></li>
</ul>
<h3 id="对比算法">对比算法</h3>
<ul>
<li>R-ViNE<br />
使用基于确定的取整（rounding-based）的方法来获得与VNE问题对应的MIP的线性规划松弛（linear programming relaxation），以最小化VNR的成本</li>
<li>D-ViNE<br />
和RR-ViNE，但特殊在其取整方法是随机的</li>
<li>GRC<br />
一种基于全局资源容量管理的节点排序算法</li>
<li>MCVNE<br />
一种基于强化学习的 Monte-Carlo MCTS 动作空间搜索算法</li>
<li>NodeRank<br />
一种节点排序算法，灵感来自与Google的PageRank算法</li>
</ul>
<p>它们基本覆盖了当前大部分算法的观点</p>
<h3 id="评估指标">评估指标</h3>
<h4 id="vnr-到达率测试">VNR 到达率测试</h4>
<p>现实中，虚拟网络总在忙碌时频繁接受VNR请求，空闲时则反之。为了模拟这种变化的情况，我们将到达率由4个/100时间单位逐渐增至20个/100时间单位，步长为2。</p>
<p><img src="/resource/images/rp-vne-rl-gcn-1.png" /></p>
<p>从上图可以看出，该算法在VNR请求较频繁时，接受率和平均收益明显优于其他算法。</p>
<h4 id="资源请求率测试">资源请求率测试</h4>
<p>不同的网络服务具有不同的资源需求模式，比如计算密集型任务需要更多的节点资源（CPU），而通信密集型任务需要更多的链路资源（带宽）。为了模拟不同的情况，我将节点与链路资源需求的逐渐由[0,30]升至[0,100]的平均分布，步长为10。</p>
<p><img src="/resource/images/rp-vne-rl-gcn-2.png" /></p>
<p>从上图可以发现，随着资源需求越来越多，嵌入的成功率也会都明显随之降低，但该算法的表现依然是最忧的。</p>
<h4 id="节点数量扩展性测试">节点数量扩展性测试</h4>
<h4 id="平均运行时间统计">平均运行时间统计</h4>
<h2 id="主要贡献">主要贡献</h2>
<h2 id="总结思考">总结思考</h2>
]]></content>
      <categories>
        <category>RP - 科研论文</category>
      </categories>
      <tags>
        <tag>论文精读</tag>
        <tag>VNE</tag>
        <tag>强化学习</tag>
        <tag>GNN</tag>
        <tag>GCN</tag>
      </tags>
  </entry>
  <entry>
    <title>【PPT设计】计算机学术会议中优秀PPT鉴赏</title>
    <url>/2020/08/17/AD%20-%20%E8%89%BA%E6%9C%AF%E8%AE%BE%E8%AE%A1/ad-ppt-academic-cs-1/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>AD - 艺术设计</category>
      </categories>
      <tags>
        <tag>PPT设计</tag>
        <tag>学术PPT</tag>
      </tags>
  </entry>
  <entry>
    <title>【讲座收获】潘复生院士谈科学创新</title>
    <url>/2019/09/22/MY%20-%20%E6%84%9F%E6%82%9F%E9%9A%8F%E7%AC%94/academician-lecture-pan-fu-sheng/</url>
    <content><![CDATA[<h2 id="科学发展现状">科学发展现状</h2>
<p>资源匮乏<br />
信息科技依赖<br />
生物科学<br />
学科交叉对知识要求越来越高</p>
<h3 id="我国发展现状">我国发展现状</h3>
<p>16个重大专项</p>
<p>科技实力低于美国<br />
科技投入远低于发达国家<br />
基础研究待加强<br />
科学素养低（官员政策制定）科普</p>
<h2 id="创新素质培养">创新素质培养</h2>
<h3 id="学会合作">学会合作</h3>
<p>团结他人（比自己优秀的和略差与自己的）</p>
<h3 id="学会放弃">学会放弃</h3>
<p>（选择自己最喜欢的方向）</p>
<h3 id="学会学习">学会学习</h3>
<p>（ 知识学习能力远比知识记忆或积累能力更重要<br />
学习能力比死记硬背更重要<br />
基本工具一定要好（英语，计算机）<br />
学会忘记有时比学会记住更重要 ）</p>
<h3 id="学会分析和怀疑提问问题">学会分析和怀疑+提问问题</h3>
<p>（不鼓励小中学生瞎猜怀疑=》知识积累+理解世界）<br />
大学生学会怀疑</p>
<h3 id="学会表达">学会表达</h3>
<p>（让他人理解，好的表达扬长避短，站在对方角度来表达）</p>
<h2 id="科研技巧">科研技巧</h2>
<ol type="1">
<li>重视偶然性才有必然性</li>
<li>交流和讨论（潘与汉诺丁-英欧支持+国家支持）</li>
<li>仿生学（创新启示）</li>
<li>做多数人喜欢的事情（做好不喜欢的事，做自己喜欢的事做的会更好）</li>
<li>逆向思维是成功的捷径</li>
</ol>
<h2 id="我的感悟">我的感悟</h2>
]]></content>
      <categories>
        <category>MY - 感悟随笔</category>
      </categories>
      <tags>
        <tag>院士讲座</tag>
        <tag>创新思维</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】基础语法总结</title>
    <url>/2019/01/11/PL%20-%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/pl-python-fundamental-syntax/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>PL - 编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>语法进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo NexT】定制Hexo博客NexT主题</title>
    <url>/2020/08/16/ST%20-%20%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/st-hexo-next/</url>
    <content><![CDATA[<h2 id="自定义css">自定义CSS</h2>
<p>可以在 自定义的 custom.styl 中，写入相应的样式，记得定要合理引入</p>
<ul>
<li>njk文件</li>
<li>md文件</li>
</ul>
<h2 id="引入js特效">引入JS特效</h2>
<p>在custom文件夹中自定义js文件，并在合理的html页面引入</p>
<h2 id="构建自定义页面">构建自定义页面</h2>
<h3 id="不含整体框架-layout-false">不含整体框架 layout: false</h3>
<p>！跳过渲染skip-render<br />
因为该页面并不会利用主题的文件夹下的layout中的各种样式，所以需要完全自定义css和js，可以用外链文件的方式引入到md文件中</p>
<ol type="1">
<li>新建页面</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new page xxx</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>文件夹新建js和css文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">|</span><br><span class="line">|-- xxx.md</span><br><span class="line">|-- a.js</span><br><span class="line">|-- b.css</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>编辑xxx.md文件</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: xxx</span><br><span class="line">type: xxx</span><br><span class="line">layout: false</span><br></pre></td></tr></table></figure>
<h3 id="含框架blog子页面">含框架blog子页面</h3>
<p>这种方式可以依赖于主题的css样式和js样式 新建页面</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new page xxx</span><br></pre></td></tr></table></figure>
<h2 id="自定义html">自定义html</h2>
]]></content>
      <categories>
        <category>ST - 软件工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>【Markdown】使用小技巧</title>
    <url>/2019/09/22/ST%20-%20%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/st-markdown-tips/</url>
    <content><![CDATA[<h2 id="嵌入htmljscss">嵌入HTML+JS+CSS</h2>
]]></content>
      <categories>
        <category>ST - 软件工具</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>小技巧</tag>
      </tags>
  </entry>
</search>
